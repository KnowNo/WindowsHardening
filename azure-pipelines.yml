# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- drafts/*

pool:
  vmImage: 'Ubuntu-16.04'

steps:
- task: UseRubyVersion@0
  inputs:
    versionSpec: '>= 2.4'
    addToPath: true

- script: gem install asciidoctor-pdf --pre && asciidoctor-pdf -v
  displayName: 'gem install asciidoctor-pdf'

- script: asciidoctor-pdf --out-file WindowsHardening-${BUILD_BUILDNUMBER}.pdf README.asciidoc && ls -lR && printenv
  displayName: 'Generate PDF file'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: WindowsHardening*.pdf
    artifactName: 'WindowsHardening-${Build.BuildNumber}'

# - task: PublishPipelineArtifact@0
#   inputs:
#     pathToPublish: 'WindowsHardening-$(Build.BuildNumber).pdf'
#     artifactName: 'WindowsHardening-$(Build.BuildNumber)'

# Useful info, that.

# - powershell: gci env:* | sort-object name | Format-Table -AutoSize | Out-File $env:BUILD_ARTIFACTSTAGINGDIRECTORY/environment-variables.txt

# - task: PublishBuildArtifacts@1
#   inputs:
#     pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     artifactName: drop

# This doesn't work, it ALWAYS generates a ZIP file as 'artifactName.zip'
# Doesn't appear to let you just release a single file.

# Publish Build Artifacts
# Publish build artifacts to Azure Pipelines/TFS or a file share
# - task: PublishBuildArtifacts@1
#   inputs:
#     pathToPublish: WindowsHardening.pdf
#     artifactName: WindowsHardening.pdf
#     #pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     #artifactName: 'drop'
#     #publishLocation: 'Container' # Options: container, filePath
#     #targetPath: # Required when publishLocation == FilePath
#     #parallel: false # Optional
#     #parallelCount: # Optional

# Try using Publish Pipeline Artifact task
# This doesn't work, it also always generates a ZIP file.

# Publish Pipeline Artifact
# Publish a local directory or file as a named artifact for the current pipeline.
# - task: PublishPipelineArtifact@0
#   inputs:
#     #artifactName: 'drop'
#     targetPath: WindowsHardening.pdf

# GitHub Release
# Create, edit, or delete a GitHub release.
# - task: GitHubRelease@0
#   inputs:
#     gitHubConnection: WindowsHardeningGitHub
#     repositoryName: WindowsHardening
#     action: 'create'
#     assets: WindowsHardening.pdf
#     #action: 'create' # Options: create, edit, delete
#     #target: '$(Build.SourceVersion)' # Required when action == Create || Action == Edit
#     #tagSource: 'auto' # Required when action == Create# Options: auto, manual
#     #tag: # Required when action == Edit || Action == Delete || TagSource == Manual
#     #title: # Optional
#     #releaseNotesSource: 'file' # Optional. Options: file, input
#     #releaseNotesFile: # Optional
#     #releaseNotes: # Optional
#     #assets: '$(Build.ArtifactStagingDirectory)/*' # Optional
#     #assetUploadMode: 'delete' # Optional. Options: delete, replace
#     #isDraft: false # Optional
#     #isPreRelease: false # Optional
#     #addChangeLog: true # Optional

# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'
